---
title: "Class 7 Lab: Machine Learning I"
author: "Pamelina Lo (PID:A16735368)"
format: gfm
---

Today we are going to learn how to apply different machine learning methods, beginning with clustering:

The goal here is to find groups/ clusters in you input data. 

First, I will make up some data with clear groups. For this I will use the `rnorm()` function:

```{r}
rnorm(10)
```

```{r}
hist(rnorm(10000, mean = 3))
```

You can put this into a vector using 'c()' function. 
```{r}
n=30
x <- (c(rnorm(n, mean =-3), rnorm(n, mean =3)))
y <- rev(x)
z <- cbind(x,y)

head(z)
```

```{r}
plot(z)
```



## Class Discussion: 

## kmeans()

Use the `kmeans()` dunction k to 2 and nstart=20

Inspect/print results

>Q. How many points are in each cluster?
>Q. What 'components' of your results
- cluster size?
- cluster alignment/membership?
- cluster center?

```{r}
km <- kmeans(z, centers =2)
km
```

Results in kmeans object `km`
```{r}
attributes(km)
```

cluster size? 
```{r}
km$size
```

cluster assignment/memebership?
```{r}
km$cluster
```

cluster center?
```{r}
km$centers
```


>Q. Plot x colored by the kmeans cluster assignment add cluster centers as blue points

```{r}
plot(z,col="red")
```

```{r}
plot(z,col= c("red", "blue"))
```

R will re-cycle the shorter color vector to be the same length as the longer (number of data points) in it. 

```{r}
plot(z, col=100)
```

```{r}
plot(z, col=km$cluster)
points(km$centers, col="blue", pch=18, cex=3)
```

>Q. Can you turn kmeans and ask for 4 clusters please and plot the results like we have done above?

```{r}
pm <- kmeans(z, centers =4)
pm
attributes(pm)
plot(z, col=pm$cluster)
points(pm$centers, col="blue", pch=18, cex=1)
```

You can add more clusters by replacing the number of centers with `kmeans()` functions. See above.


## Hierarchical Clustering

Let's take our some made-up data `z` and see how hclust works.

First we need a distance matrix for our data to be clustered.

```{r}
d <- dist(z)
hc <- hclust(d)
hc
```

```{r}
plot(hc)

#To add a line on your plot
abline(h=8, col = "red")
```
I can get my cluster membership vectory by "cutting the tree" with the `cutree()` function like so:
```{r}
grps <- cutree(hc, h=8)
grps
```

Can you plot `z` colored by our hclust results:
```{r}
plot(z, col= grps)
```


## PCA of UK food data
Read data from the UK food consumption in different parts of the UK. 

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
head(x)
```


**Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?**

```{r}
dim(x)
ncol(x)
nrow(x)
```


> Checking your data

```{r}
## Preview the first 6 rows
head(x)
```
```{r}
# Note how the minus indexing works
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```
```{r}
dim(x)
x <- read.csv(url, row.names=1)
head(x)
```


**Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?**
The 'row.names()' function would be the best approach to solve the problem because the output appears more organized and mucn more cleaner. Yes, this approach is more robust than the other.  

```{r}
x <- read.csv(url, row.names=1)
head(x)
```


**Q3: Changing what optional argument in the above barplot() function results in the following plot?**
You change the `beside =` function from TRUE (T) to FALSE (F) in the barplot() function results in the following plot. 

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```


**Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?**

```{r}
pairs(x, col=rainbow(10), pch=16)
```

Its hard to see structure and trends and even this small data set. How will we ever do this when wh have big datta sets with 1,000s or 10s of thousands of things we are measuring.

**Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?**
The main difference between N. Ireland and the other countries of the UK is that N. Ireland has a some scattered data/points (which falls out of the diagonal line of data) compared to the other UK countries which suggests that the data has some differences than the other data. 

## PCA to the Rescue
Let's see how PCS deals with thsi dataset. So main functions in base R to do PCA is called `prcomp()`.
```{r}
pca <- prcomp(t(x))
summary(pca)
```

Let's see what is in inside this `pca` object that we created from running `prcomp()`.
```{r}
attributes(pca)
```
```{r}
pca$x
```
```{r}
plot(pca$x[,1], pca$x[,2], 
     col=c("black", "red","blue", "darkgreen"), pch=16,
     xlab = "PC1(67,4%)" , ylab = "PC2(29%)" )
```


**Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.**

```{r}
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```

**Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.**

```{r}
plot(pca$x[,1], pca$x[,2],
     xlab = "PC1(67,4%)" , ylab = "PC2(29%)") 
     text(pca$x[,1], pca$x[,2], colnames(x), col=c("black", "red","blue", "darkgreen", pch=16))
```

**Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?**

```{r}
## Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```
The two food groups Fresh_potatoes and Soft_drinks. PC2 tells us about the food of the best possible loading scores in all UK countries in which the best possible loading score for fresh potatoes is Scotland and N. Ireland, England, and Wales have the best loading score in soft drinks.   

## PCA of RNA-seq data
```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```
 
 **Q10. How many genes and samples are in this data?**
 
```{r}
dim(rna.data)
ncol(rna.data)
nrow(rna.data)
```
 

